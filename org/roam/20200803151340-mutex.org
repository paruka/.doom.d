#+SETUPFILE: ./20200803151340-mutex.org
#+HUGO_SECTION: 
#+TITLE: mutex
#+ROAM_TAGS: thread thread-synchronization
#+ROAM_ALIAS:

* 什么是互斥量？
互斥量本质上是一把锁，在访问共享资源前对互斥量进行加锁，在访问完成后释放互斥量的锁。

对互斥量加锁后，任何其它试图再次对互斥量进行加锁的线程都会被阻塞，直到当前线程释放该互斥锁。

* 互斥量的创建及销毁
互斥量用 **pthread_mutex_t** 数据类型表示，在使用它之前，需要对其初始化。对于静态分配的互斥量，可以通过将其置为常量 **PTHREAD_MUTEX_INITIALIZER** 进行初始化。

我们通常通过[[file:20200803152242-pthread_mutex_init.org][pthread_mutex_init]]进行初始化。如果互斥量是通过动态分配的，则在释放内存前，需要调用[[file:20200803152242-pthread_mutex_init.org][pthread_mutex_destory]]进行销毁。

* 互斥量加锁
通过调用[[file:20200803153747-pthread_mutex_lock.org][pthread_mutex_lock]]对互斥量进行加锁。如果互斥量已经加锁，调用线程将阻塞，直到互斥量被解锁。对互斥量解锁，需要调用[[file:20200803153747-pthread_mutex_lock.org][pthread_mutex_unlock]]。

如果线程不希望被阻塞，可以使用[[file:20200803153747-pthread_mutex_lock.org][pthread_mutex_trylock]]尝试加锁。如果在调用时，互斥量处于未锁定状态，该函数将锁住互斥量，否则调用会失败，返回 **EBUSY** 。
